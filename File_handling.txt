Ques1) Write a program to analyze a CSV file containing sales data. Generate a report with total sales, 
average sales, and the top selling product

Code:
import csv
with open('sales.csv', mode='r') as file:
    csv_read= csv.reader(file)

    total_sales = {}

    for row in csv_read:
        product = row[0]  
        sales = int(row[1])

        if product in total_sales:
            total_sales[product] += sales 
        else:
            total_sales[product] = sales

for product, total in total_sales.items():
    print(f"Total sales for {product}: {total}")


Ques 2) Develop a program to merge multiple text files into one while handling exceptions for missing or 
unreadable files. Include options to remove duplicate lines.

Code:
import os
def merge_files(file_names, output_file):
    try:
        all_lines = []
     
        for file_name in file_names:
            if os.path.exists(file_name):
                try:
                    with open(file_name, 'r') as file:
                        lines = file.readlines()
                        all_lines.extend(lines)  
                except Exception as e:
                    print(f"Error reading {file_name}: {e}")
            else:
                print(f"File {file_name} does not exist.")



            all_lines = list(set(all_lines))

        with open(output_file, 'w') as output:
            output.writelines(all_lines)

        print(f"Files merged successfully into {output_file}")

    except Exception as e:
        print(f"An error occurred: {e}")

files = ['file1.txt', 'file2.txt', 'file3.txt']
output_file = 'merged_output.txt'
merge_files(files, output_file)


Ques 3)Create a program to process a JSON file, validate its schema, and generate a summary report with key 
statistics (e.g., number of entries, missing fields).

Code:
import json
expected_schema = ["name", "age", "email"]

def validate_schema(data, schema):
    missing_fields = []
    for entry in data:
        missing = []
        for field in schema:
            if field not in entry:
                missing.append(field)
        missing_fields.append(missing)
    return missing_fields

def generate_report(data, missing_fields):

    total_entries = len(data)
    print(f"Total entries: {total_entries}")
    for i, entry in enumerate(missing_fields):
        if entry:
            print(f"Missing fields: {entry}")
    
file_path = 'data.json'
try:
    with open(file_path, 'r') as file:
        data = json.load(file)
except FileNotFoundError:
    print(f"Error: File '{file_path}' not found.")

if data is not None:
    missing_fields = validate_schema(data, expected_schema)
    generate_report(data, missing_fields)

        