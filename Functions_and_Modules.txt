Ques 1) Write a function that accepts *args to calculate the product of all numbers provided. 
Add error handling to manage non-numeric inputs.

Code:
def calculate_product(args):
    product = 1  
    for arg in args:
        try:
            product *= float(arg)
        except ValueError:
            print(f"Error: '{arg}' is not a valid number.")
            return  
    return product 

result = calculate_product((2,7, 4))
if result is not None:  
    print(f"The product of the numbers is: {result}")


Ques 2) Develop a program that splits functionality into three separate modules: one for fetching data (e.g., reading a file), 
one for processing (e.g., filtering or transforming the data), and one for reporting results 
(e.g., saving or displaying the output).

Code:

# fetch_data.py
def fetch_data(file_path):
        with open(file_path, 'r') as file:
            data = file.readlines()
        return data

# process_data.py

def process_data(data):
    processed_data = "" 
    for line in data:
        processed_data += line.upper()  
    return processed_data


# report_results.py
def report_results(data, output_path):
        with open(output_path, 'w') as file:
            for line in data:
                file.write(line + '\n')
        print(f"Results have been written to {output_path}")


# main.py
from fetch_data import fetch_data
from process_data import process_data
from reports_results import report_results

input_file = 'file1.txt'
output_file = 'file2.txt'

data = fetch_data(input_file)
if data:
    processed_data = process_data(data)
    report_results(processed_data, output_file)


Ques 3) Create a class-based module  MathOperations  that encapsulates common mathematical functions 
(like addition, subtraction, matrix multiplication). Use this module in a program to perform operations
based on user input.

Code:

# math_operations.py

class MathOperations:
    def add(self, num1, num2):
        return num1 + num2

    def subtract(self, num1, num2):
        return num1 - num2

    def multiply_matrices(self, matrix1, matrix2):
        result = []
        for i in range(len(matrix1)):  
            row = []
            for j in range(len(matrix2[0])):  
                sum = 0
                for k in range(len(matrix2)):  
                    sum += matrix1[i][k] * matrix2[k][j]
                row.append(sum)
            result.append(row)
        return result

def display(matrix):
    for row in matrix:
        print(row)

# main.py

from math_operations import MathOperations, display
mathop = MathOperations() 

print('''Choose an operation:
1. Addition
2. Subtraction
3. Matrix Multiplication''')

choice = int(input("Enter the number of the operation you want to perform: "))

num1 = float(input("Enter the first number: "))
num2 = float(input("Enter the second number: "))

if choice == 1: 
    result = mathop.add(num1, num2)
    print(f"The result of addition is: {result}")

elif choice == 2:  
    result = mathop.subtract(num1, num2)
    print(f"The result of subtraction is: {result}")

elif choice == 3: 
    print("Enter the first matrix:")
    matrix1 = []
    rows1 = int(input("How many rows in matrix 1? "))
    for i in range(rows1):
        input_string = input(f"Enter row {i+1}: ")
        row = [int(x) for x in input_string.split()]
        matrix1.append(row)

    print("Enter the second matrix:")
    matrix2 = []
    rows2 = int(input("How many rows in matrix 2? "))
    for i in range(rows2):
        input_string = input(f"Enter row {i+1}: ")
        row = [int(x) for x in input_string.split()]
        matrix2.append(row)


    if len(matrix1[0]) != len(matrix2):
        print("Matrix multiplication is not possible: ")
    else:
        result = mathop.multiply_matrices(matrix1, matrix2)
        print("The result of matrix multiplication is:")
        display_matrix(result)

else:
    print("Invalid choice!")


Ques 4)Build a package  UserAuth  containing modules for password hashing, login verification, 
and user activity logging. Create a script that uses this package to simulate user authentication.

Code:
# hashing.py 
def hash(str1):
    hashed = str1[::-1]
    return hashed

#logging.py
def log(username,activity):
    with open("activity_log.txt", "a") as file:
        file.write(f"{username}: {activity}\n")

#verification.py
from userAuth.hashing import hash
db = {
    "user1": 12345,
}

def verify(username, password):
    if username in db:
        stored_password_hash = int(db[username])
        input_password_hash = int(hash(password))
        print(stored_password_hash), print(input_password_hash)
        if input_password_hash == stored_password_hash:
            print("Password match")
            return True
    return False

#main.py
from userAuth.verification import verify
from userAuth.logging import log

username = input("Enter username: ")
password = input("Enter password: ")

if verify(username, password):
    print("Login successful!")
    log(username, "Login successful")
else:
    print("Login failed!")
    log(username, "Failed login attempt")
